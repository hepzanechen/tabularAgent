# Model Engine Configuration
# Defines available model engines, their parameters, and tuning options

engines:
  # Random Forest Engine
  sklearnRandomForest:
    class: SklearnRandomForest
    description: "Random Forest classifier/regressor with ensemble learning"
    default_params:
      n_estimators: 100
      max_depth: null
      min_samples_split: 2
      min_samples_leaf: 1
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        n_estimators: [50, 100, 200]
        max_depth: [10, 20, null]
        min_samples_split: [2, 5, 10]
        min_samples_leaf: [1, 2, 4]
  
  # Ridge Regression/Classification Engine
  sklearnRidge:
    class: SklearnRidge
    description: "Ridge regression/classification with L2 regularization"
    default_params:
      alpha: 1.0
      fit_intercept: true
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        alpha: [0.1, 1.0, 10.0, 100.0]
        fit_intercept: [true, false]

  # Lasso Regression/Classification Engine
  sklearnLasso:
    class: SklearnLasso
    description: "Lasso regression/classification with L1 regularization"
    default_params:
      alpha: 1.0
      fit_intercept: true
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        alpha: [0.1, 1.0, 10.0, 100.0]
        fit_intercept: [true, false]

  # Elastic Net Engine
  sklearnElasticNet:
    class: SklearnElasticNet
    description: "Elastic Net regression with L1 and L2 regularization"
    default_params:
      alpha: 1.0
      l1_ratio: 0.5
      fit_intercept: true
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        alpha: [0.1, 1.0, 10.0]
        l1_ratio: [0.1, 0.5, 0.9]
        fit_intercept: [true, false]

  # Linear Regression/Logistic Regression Engine
  sklearnLinear:
    class: SklearnLinear
    description: "Linear/Logistic regression without regularization"
    default_params:
      fit_intercept: true
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        fit_intercept: [true, false]

  # Support Vector Machine Engine
  sklearnSVM:
    class: SklearnSVM
    description: "Support Vector Machine for regression/classification"
    default_params:
      C: 1.0
      kernel: "rbf"
      gamma: "scale"
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        C: [0.1, 1.0, 10.0]
        kernel: ["linear", "rbf", "poly"]
        gamma: ["scale", "auto", 0.1, 1.0]

  # K-Nearest Neighbors Engine
  sklearnKNN:
    class: SklearnKNN
    description: "K-Nearest Neighbors for regression/classification"
    default_params:
      n_neighbors: 5
      weights: "uniform"
      algorithm: "auto"
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        n_neighbors: [3, 5, 7, 9]
        weights: ["uniform", "distance"]
        algorithm: ["auto", "ball_tree", "kd_tree"]

  # LightGBM Engine
  lightgbm:
    class: LightGBMModel
    description: "LightGBM gradient boosting framework"
    default_params:
      n_estimators: 100
      learning_rate: 0.1
      max_depth: -1
      num_leaves: 31
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        n_estimators: [50, 100, 200]
        learning_rate: [0.05, 0.1, 0.2]
        max_depth: [5, 10, 20]
        num_leaves: [15, 31, 63]

  # XGBoost Engine
  xgboost:
    class: XGBoostModel
    description: "XGBoost extreme gradient boosting"
    default_params:
      n_estimators: 100
      learning_rate: 0.1
      max_depth: 6
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        n_estimators: [50, 100, 200]
        learning_rate: [0.05, 0.1, 0.2]
        max_depth: [3, 6, 10]

  # CatBoost Engine
  catboost:
    class: CatBoostModel
    description: "CatBoost gradient boosting for categorical features"
    default_params:
      iterations: 100
      learning_rate: 0.1
      depth: 6
      random_state: 42
      verbose: false
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        iterations: [50, 100, 200]
        learning_rate: [0.05, 0.1, 0.2]
        depth: [3, 6, 10]

  # TabPFN Engine (v2.0 - supports both classification and regression)
  tabpfn:
    class: TabPFNModel
    description: "TabPFN v2.0 foundation model for tabular data (auto-detects GPU)"
    default_params:
      # device: auto-detected (GPU if available, CPU as fallback)
      N_ensemble_configurations: 32  # For classification only
    
    tuning:
      method: "limited"  # TabPFN v2.0 has limited hyperparameter options
      cv: 3  # Smaller CV due to TabPFN's speed
      param_grid:
        device: ["cpu", "cuda"]  # Will auto-select best available
        # For classification, can also tune:
        # N_ensemble_configurations: [16, 32, 64] 
        # For regression, fewer parameters available
    
    constraints:
      max_samples: 10000  # Updated for v2.0
      max_features: 100
      recommended_samples: 1000  # Optimal performance range
      gpu_memory_requirement: "4GB"  # Minimum recommended GPU memory

  # Neural Network Engine
  neuralnet:
    class: NeuralNetworkModel
    description: "Multi-layer Perceptron neural network"
    default_params:
      hidden_layer_sizes: [100]
      activation: "relu"
      solver: "adam"
      alpha: 0.0001
      max_iter: 1000
      random_state: 42
    
    tuning:
      method: "grid_search"
      cv: 5
      param_grid:
        hidden_layer_sizes: [[50], [100], [100, 50]]
        activation: ["relu", "tanh"]
        alpha: [0.0001, 0.001, 0.01]

# Global model training configuration
training:
  test_size: 0.2
  cross_validation:
    cv: 5
    scoring: "auto"  # Will be determined based on problem type
  
  evaluation_metrics:
    regression: ["rmse", "mae", "r2"]
    classification: ["accuracy", "precision", "recall", "f1"]

# Default engine selection
defaults:
  regression: "sklearnRandomForest"
  classification: "sklearnRandomForest" 